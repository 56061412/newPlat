package com.system.common;import java.io.IOException;import java.util.Date;import java.util.List;import java.util.Map;import javax.servlet.ServletContext;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javax.servlet.http.HttpSession;import net.sf.json.JSONArray;import net.sf.json.JSONObject;import org.apache.log4j.Logger;import org.apache.struts2.ServletActionContext;import org.apache.struts2.interceptor.SessionAware;import org.springframework.web.context.WebApplicationContext;import org.springframework.web.context.support.WebApplicationContextUtils;import com.auto.oa.user.domain.OaUserInfo;import com.opensymphony.xwork2.ActionContext;import com.opensymphony.xwork2.ActionSupport;import com.opensymphony.xwork2.util.ValueStack;import com.system.exception.PlatException;import com.system.util.BeanUtil;import com.system.util.DateUtil;import com.system.util.JsonUtil;public class BaseAction extends ActionSupport implements SessionAware{	private static final long serialVersionUID = 8473867583694135588L;	private final static String PLAT_USERLABLE = "plat_userLable";	private Map<String, Object> session;	protected Logger log = Logger.getLogger(this.getClass());	@Override	public void setSession(Map<String, Object> session) {		this.session = session;	}		public Map<String, Object> getSession(){		return this.session;	}		/**	 * @功能 插入一个domain	 * @param <T>	 * @param t	 * @return 插入后的domain	 * @throws EfmpxSessionNotFoundException 	 * @throws PlatException 	 */	public <T extends IDomain> T getDefaultBean(T t, HttpServletRequest request) {		try {			if (t == null)				throw new PlatException("");			Date currentDate = DateUtil.currentDate();			String userCode = getSessionUserCode(request);			if (BeanUtil.isNotBlank(t.ggetRecordGuid())){				if (t.getUpdateTime() == null)					t.setUpdateTime(currentDate);				if (BeanUtil.isBlank(t.getModifyUser()))					t.setModifyUser(userCode);				if (BeanUtil.isBlank(t.getUpdateUser()))					t.setUpdateUser(userCode);			}else{				if (t.getCreateTime() == null)					t.setCreateTime(currentDate);				if (BeanUtil.isBlank(t.getCreateUser()))					t.setCreateUser(userCode);					if (t.getUpdateTime() == null)					t.setUpdateTime(currentDate);				if (BeanUtil.isBlank(t.getModifyUser()))					t.setModifyUser(userCode);				if (BeanUtil.isBlank(t.getUpdateUser()))					t.setUpdateUser(userCode);			}						return t;		} catch (Exception e) {			throw new PlatException(e);		}	}		public HttpServletRequest getRequest() {		return ServletActionContext.getRequest();	}	public HttpServletResponse getResponse() {		HttpServletResponse response = ServletActionContext.getResponse();		response.setCharacterEncoding("UTF-8");		return response;	}	public HttpSession getHttpSession() {		return getRequest().getSession();	}	public ServletContext getApplication() {		return ServletActionContext.getServletContext();	}	public Map<String, Object> getStruts2Session() {		return ActionContext.getContext().getSession();	}	public Map<String, Object> getStrus2Application() {		return ActionContext.getContext().getApplication();	}	public Object getBeanObj(String beanName) {		WebApplicationContext webAppCtx = WebApplicationContextUtils				.getWebApplicationContext(this.getApplication());		return webAppCtx.getBean(beanName);	}	public ValueStack getValueStack() {		ValueStack vs = (ValueStack) getRequest().getAttribute("struts.valueStack");		return vs;	}	public Object getObjValue(String name) {		return getValueStack().findValue(name);	}	public String getFormParamValue(String name) {		return getValueStack().findString(name);	}	public String getUrlQueryValue(String name) {		return getRequest().getParameter(name);	}		public String getSessionUserCode(){		return getSessionUserCode(getRequest());	}		public String getSessionUserCode(HttpServletRequest request){		String userCode = "";		if(session != null && !session.isEmpty()){			userCode = session.get(PLAT_USERLABLE).toString();		}				if(BeanUtil.isBlank(userCode)){			userCode = request.getSession().getAttribute(PLAT_USERLABLE).toString();		}				return userCode;	}		public OaUserInfo getSessionOaUserInfo(){		return getSessionOaUserInfo(getRequest());	}		public OaUserInfo getSessionOaUserInfo(HttpServletRequest request){		OaUserInfo oaUserInfo = (OaUserInfo)request.getSession().getAttribute("userInfo");				return oaUserInfo;	}	public Page getPage(){		long pageIndex = Long.valueOf(getRequest().getParameter("pageIndex"));//页数		long pageSize = Long.valueOf(getRequest().getParameter("pageSize"));//每页条数				Page page = new Page(pageIndex*pageSize,pageSize);				String sortField = getRequest().getParameter("sortField"); //排序字段		String sortOrder = getRequest().getParameter("sortOrder"); //排序方式				if(sortField!=null){			page.setOrderBy(sortField);		}		if(sortOrder!=null){			page.setOrder(sortOrder);		}				return page;	}			/**	 * Action使用 	 * 分页显示数据封装	 * 将查询结果转换成 json 并输出 	 */	@SuppressWarnings("rawtypes")	public void pageListWriteOut(List list, Page page) throws IOException{		JSONObject resultJson = JsonUtil.listToJsonObject(list);		resultJson.put("total", page.getCount());//		System.out.println("resultJson............."+resultJson);		String str = resultJson.toString();		getResponse().getWriter().print(str);	}		/**	 * Action使用 	 * 树结构显示数据封装	 * 将查询结果转换成 json 并输出 	 */	@SuppressWarnings("rawtypes")	public void pageTreeWriteOut(List list) throws IOException{		JSONArray resultJsonArray = JsonUtil.listToJSONArray(list);		System.out.println("resultJsonArray............."+resultJsonArray);		String str = resultJsonArray.toString();		getResponse().getWriter().print(str);	}		public void detailResultWriteOut(Object obj) throws IOException{		JSONObject resultJson = JsonUtil.beanToJsonObject(obj);		System.out.println("resultJson.....detailResultWriteOut........"+resultJson);		getResponse().getWriter().print(resultJson);	}}